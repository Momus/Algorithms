#+TITLE: Working through Sedgwick's Algorithms for Rubyists in Emacs
#+AUTHOR: Dmitri G. Brengauz

:PROPERTIES:
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/bigblow.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/hideshow.css"/>

#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-1.11.0.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-ui-1.10.2.min.js"></script>

#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.localscroll-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.scrollTo-1.4.3.1-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.zclip.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/bigblow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/hideshow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
:END:

* How to learn as little Java as Possible.
    :PROPERTIES:
    :CUSTOM_ID: Intro
    :END:      
    
*** Motivation
    Robert Sedgwick's textbook introduced a generation of students to
    the study of Algorithms. There are few better
    introductions. Unfortunately, he uses Java to teach his classes,
    but hopefully not so much Java that a Ruby programmer should be
    able to succeed in the class with a little advanced preparation. 
* Setup 
  :PROPERTIES:
  :CUSTOM_ID: setup
  :END:      
  First Problem: create and execute a java program with emacs.
*** Java from the [[http://algs4.cs.princeton.edu/linux/][course site]]
      :PROPERTIES:
      :CUSTOM_ID: setup-java
      :END:      
***** move algs4.jar to ~/usr/src/java
***** modify ~/bin/java[c]-algs4 to point to algs4.jar
*** Emacs
    :PROPERTIES:
    :CUSTOM_ID: setup-emacs
    :END:      
***** Eclim
	:PROPERTIES:
	:CUSTOM_ID: setup-emacs-eclim
	:END:      
	After trying to get everything working with jdee-mode for a
	couple days, I found this [[http://www.goldsborough.me/emacs,/java/2016/02/24/22-54-16-setting_up_emacs_for_java_development/][great tutorial]], and so I gave it up
	and tried eclim. Surprisingly, it wasn't so bad.
******* Install algs4 jar
	Have to use [[http://wiki.eclipse.org/FAQ_How_do_I_add_an_extra_library_to_my_project%27s_classpath%3F][Eclipse]]. The only way I found to do that is to leave a copy of
	algs4.jar in projectroot/lib, fire up Eclipse, the add by
	going to  Properties > Java Build Path > Libraries
***** TODO XML
      :PROPERTIES:
      :CUSTOM_ID: setup-emacs-xml
      :END:      
******* Install trang
********* [[https://code.google.com/archive/p/jing-trang/downloads][Download]]
********* make small script in ~/usr/bin
***** Checkstyle
      :PROPERTIES:
      :CUSTOM_ID: setup-emacs-checkstyle
      :END:      

      jdee expects the jar file in a very specific
      place. (.emacs.d/elisp/wherever_the_packages_installed/java/ et
      .c) I put it there until I can find a better location.
*** Maven
    :PROPERTIES:
    :END:
    #+BEGIN_SRC latex
      Originally, the motivation for using Maven 3 was because Jdee was so
      tightly integrated with it, that it seemed easier to figure out Maven
      than to figure out how to use Jdee without it.  However, at about the
      same time as I figured out Maven, I also figured out that ecvim-mode
      was the way to go. However, Maven seemed so useful as a
      meta-framework, that I continued using it for this project.
    #+END_SRC
    Originaly, I tried setting up this project wiht Maven 3 because
    that seemed to be tightly integraged into
      :PROPERTIES:
      :CUSTOM_ID: setup-maven
      :END:      
***** Install: just copy to /opt and make some symlinks
***** Set up project
      Using [[http://books.sonatype.com/mvnex-book/reference/simple-project-sect-create-simple.html][this book]]
******* mvn archetype:generate -DgroupID=org.momus.algorithms
******* mvn install --dowload deps, build project, run tests
******* Customize Project information.
******* Install the Algs4 libraries:
	After inability to get Maven to include a simple algs4.jar
	file without wanting POMs and god-knows what, I found this method in Maven Central:
	#+BEGIN_SRC nxml
          <dependency>
              <groupId>com.googlecode.princeton-java-algorithms</groupId>
              <artifactId>algorithms</artifactId>
              <version>4.0.1</version>
          </dependency>
	#+END_SRC
	and now the statement `
******* Run your class with agruments:
	- mvn -X -e exec:java -Dexec.mainClass=org.momus.algorithms.EuclidsGCD  -Dexec.args="340 1200"
	- -X adds logs of dubugging information.
******* mvn eclipse plugin
********* run the eclipse plugin
	  #+BEGIN_SRC 
	  mvn eclipse:eclipse
	  #+END_SRC
********* Don't forget to set up your "workspace" if it is in a different location
	  You have to run this after eclipse:eclipse. If you get into
	  trouble, run eclipse:clean and try again.
	  #+BEGIN_SRC sh
            mvn eclipse:configure-workspace -Declipse.workspace=/home/kwaku/usr/src/java/workspace
	  #+END_SRC
***** Running Projece code
      :PROPERTIES:
      :EXPORT_OPTIONS: both
      :DIR: ~/repos/learnin/algorithms
      :FORMAT: raw
      :END:
    :PROPERTIES:
    :dir ~/repos/learnin/algorithms/
    :exports both
    :END:
      #+BEGIN_SRC sh
        mvn exec:java -Dexec.mainClass="org.momus.algorithms.HelloWorld" \
        | grep -v INFO

        mvn exec:java -Dexec.mainClass="org.momus.algorithms.EuclidsGCD" \
        -Dexec.args="24 58" | grep -v INFO
      #+END_SRC

      #+RESULTS:
      | ยก | Hola | Mundo | ! |
      | 2 |      |       |   |

*** Projectile
    
*** Checkstyle
      :PROPERTIES:
      :CUSTOM_ID: setup-checkstyle
      :END:      
***** using maven:
***** install jalopy plugin.
* Testing
  The barebones Maven project already set us up with a testing
  framework: JUnit. Since it's here, why not use it? 


* Week 1

*** TODO Video Lectures
*** Union Find
***** Dynamic Connectivity
      Given a set of N objects:
      - Union Command :: connets the two objects
      - Find/Connect Query :: finds if path between objects exists
***** Modeling the Objects
      "is connected to" is an equivalence relation[fn:er]:
      - reflexive :: if /p/ is connected to /p/ 
      - symmetric :: if /p/ is connected to /q/, then /q/ is connected to /p/


*** TODO Programing Assignment
    :PROPERTIES:
    :END:
    #+BEGIN_SRC sh  :results value verbatim
      mvn exec:java -Dexec.mainClass="org.momus.algorithms.PercolationStats"  -Dexec.args="40  100" | grep -v INFO
    #+END_SRC

    #+RESULTS:
    : mean                    = 0.5907312499999999
    : stddev                  = 0.030889978551900434
    : 95% confidence interval = 0.5846768142038274, 0.5967856857961724
 
***  Testing
    #+BEGIN_SRC sh :results verbatim
      mvn -f /home/kwaku/repos/learnin/algorithms/pom.xml  test | grep -v INFO
    #+END_SRC

    #+RESULTS:
    #+begin_example

    -------------------------------------------------------
     T E S T S
    -------------------------------------------------------
    Running org.momus.algorithms.PercolationTest
    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.481 sec
    Running org.momus.algorithms.AppTest
    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
    Running org.momus.algorithms.PercolationStatsTest
    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
    Running org.momus.algorithms.EuclidsGCDTest
    Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec

    Results :

    Tests run: 4, Failures: 0, Errors: 0, Skipped: 0

#+end_example
 




* How this was published
  
*** TODO Incorporate ./publish.el into this document

* Footnotes

[fn:er] equivalence relation :: a binary relation that is at the same
time a reflexive relation, a symmetric relation, and a transative relation.
